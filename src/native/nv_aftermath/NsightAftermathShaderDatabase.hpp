//*********************************************************
//
// Copyright (c) 2019-2022, NVIDIA CORPORATION. All rights reserved.
// 
//  Permission is hereby granted, free of charge, to any person obtaining a
//  copy of this software and associated documentation files (the "Software"),
//  to deal in the Software without restriction, including without limitation
//  the rights to use, copy, modify, merge, publish, distribute, sublicense,
//  and/or sell copies of the Software, and to permit persons to whom the
//  Software is furnished to do so, subject to the following conditions:
// 
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
// 
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
//  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//
//*********************************************************

#pragma once

#include <map>

#include "NsightAftermathHelpers.hpp"

/**
 * \brief Implements a very simple shader database.
 */
class ShaderDatabase
{
public:
    /**
     * \brief Find a shader bytecode binary by shader hash.
     * \param shaderHash The shader hash to search for.
     * \param shader The shader bytecode binary.
     * \return True if the shader bytecode binary was found, false otherwise.
     */
    bool FindShaderBinary(GFSDK_Aftermath_ShaderBinaryHash const& shaderHash, std::vector<uint8_t>& shader) const;

    /**
     * \brief Find a source shader debug info by shader debug name generated by the DXC compiler.
     * \param shaderDebugName The shader debug name to search for.
     * \param debugData The source shader debug info.
     * \return True if the source shader debug info was found, false otherwise.
     */
    bool FindSourceShaderDebugData(
        GFSDK_Aftermath_ShaderDebugName const& shaderDebugName, std::vector<uint8_t>& debugData) const;

    /**
     * \brief Add a shader binary to the database.
     * \param binary The shader bytecode binary.
     * \param pdb The source shader debug info.
     */
    void AddShader(std::vector<uint8_t>&& binary, std::vector<uint8_t>&& pdb);

private:
    std::map<GFSDK_Aftermath_ShaderBinaryHash, std::vector<uint8_t>> m_shaderBinaries        = {};
    std::map<GFSDK_Aftermath_ShaderDebugName, std::vector<uint8_t>>  m_sourceShaderDebugData = {};
};
